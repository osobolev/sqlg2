buildscript {
    apply from: 'db.gradle'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath project.ext.driverClasspath
        classpath 'org.mybatis:mybatis:3.2.8'
    }
}

def runScript(connection, file, delimiter) {
    def text = new File(file).getText('UTF-8')
    def runner = new org.apache.ibatis.jdbc.ScriptRunner(connection);
    runner.setDelimiter(delimiter)
    runner.runScript(new StringReader(text))
}

task sql {
    doLast {
        URLClassLoader loader = GroovyObject.class.classLoader
        project.buildscript.configurations.classpath.each {
            loader.addURL(it.toURL())
        }
        Class.forName(jdbcDriver, true, loader)
        def connection = java.sql.DriverManager.getConnection(jdbcUrl, username, password)
        runScript(connection, 'schema_common.sql', ';')
        runScript(connection, sqlScript, project.ext.has('sqlDelimiter') ? sqlDelimiter : ';')
    }
}

ext.gradleTasks = []

def canRun(file) {
    if (file.getPath().contains('oracle_specific')) {
        return jdbcDriver.toLowerCase().contains('oracle')
    } else {
        return true
    }
}

def scanBuilds(dir, taskName) {
    def hasBuild = false
    if (dir != file('.')) {
        dir.eachFile(groovy.io.FileType.FILES) {
            if (it.name == 'build.gradle') {
                if (canRun(it)) {
                    def taskCount = gradleTasks.size() + 1
                    def newTask = project.tasks.create([name: "gradle$taskCount", type: GradleBuild])
                    newTask.buildFile = it
                    newTask.tasks = [taskName]
                    gradleTasks.add(newTask)
                }
                hasBuild = true
            }
        }
    }
    if (!hasBuild) {
        dir.eachFile(groovy.io.FileType.DIRECTORIES) {
            scanBuilds(it, taskName)
        }
    }
}

def runBuilds(taskName) {
    gradleTasks = []
    scanBuilds(file('.'), taskName)
    gradleTasks.each {
        it.execute();
    }
}

task clean {
    doLast {
        runBuilds('clean')
        fileTree('.').each {
            if (it.name == 'build.gradle' || it.name == 'settings.gradle') {
                if (it.parentFile != file('.')) {
                    delete(new File(it.parent, '.gradle'))
                }
                delete(new File(it.parent, 'build'))
                delete(new File(it.parent, 'derby.log'))
            }
        }
        def toDelete = []
        file('.').eachDirRecurse {
            if (it.name == 'wrapper') {
                toDelete.add(it)
            }
        }
        toDelete.each {
           delete it
        }
    }
}

task check {
    doLast {
       runBuilds('run')
    }
}
