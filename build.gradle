subprojects {
    group = 'com.github.osobolev.sqlg2'
    version = '5.0'

    apply plugin: 'java'
    apply plugin: 'maven'

    compileJava.options.encoding = 'UTF-8'
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    sourceSets.main.java.srcDirs = ['src']
    sourceSets.test.java.srcDirs = ['test']

    repositories {
        mavenLocal()
        mavenCentral()
    }

    jar {
        manifest {
            attributes('Implementation-Version': version)
        }
    }

    javadoc.enabled = false
}

project(':sqlg2-core') {
}

project(':sqlg2-local-server') {
    dependencies {
        compile project(':sqlg2-server-common')
    }
}

project(':sqlg2-preprocess') {

    configurations { antlr }

    dependencies {
        compile project(':sqlg2-runtime')
        compile 'org.antlr:antlr4-runtime:4.7.2'
        compileOnly 'org.apache.ant:ant:1.9.5'

        testCompile 'org.postgresql:postgresql:42.2.9'

        antlr 'org.antlr:antlr4:4.7.2'
    }

    task lexer(type: JavaExec) {
        onlyIf { file('grammar/Java8Lexer.g4').lastModified() > file('src/sqlg2/lexer/Java8Lexer.java').lastModified() }
        main = 'org.antlr.v4.Tool'
        classpath = configurations.antlr
        args '-package', 'sqlg2.lexer', '-o', 'src/sqlg2/lexer', '-encoding', 'UTF-8', 'grammar/Java8Lexer.g4'
    }
    compileJava.dependsOn lexer
}

project(':sqlg2-remote-client') {
    dependencies {
        compile project(':sqlg2-remote-common')
    }
}

project(':sqlg2-remote-common') {
    dependencies {
        compile project(':sqlg2-core')
    }
}

project(':sqlg2-remote-server') {
    dependencies {
        compile project(':sqlg2-remote-common')
        compile project(':sqlg2-server-common')
    }
}

project(':sqlg2-runtime') {
    dependencies {
        compile project(':sqlg2-core')
    }
}

project(':sqlg2-runtime-stub') {
    dependencies {
        compile project(':sqlg2-remote-client')
    }
}

project(':sqlg2-server-common') {
    dependencies {
        compile project(':sqlg2-runtime')
    }
}

project(':') {

    task cleanExamples(type: GradleBuild) {
        buildFile = file('doc/examples/build.gradle')
        tasks = ['clean']
    }

    task clean(type: Delete, dependsOn: cleanExamples) {
        delete 'doc/examples/.gradle'
        delete 'doc/api'
    }

    task javadoc(type: Javadoc) {
        def projects = [':sqlg2-core', ':sqlg2-preprocess', 'sqlg2-remote-common', 'sqlg2-remote-server', 'sqlg2-runtime', 'sqlg2-server-common']
        source = projects.collect { project(it).sourceSets.main.allJava }
        classpath = files(projects.collect { project(it).sourceSets.main.compileClasspath })
        destinationDir = file("${rootProject.projectDir}/doc/api")
        failOnError = false
        options.addStringOption('Xdoclint:none', '-quiet')

        include(['sqlg2/GBase.java', 'sqlg2/Parameter.java', 'sqlg2/SqlChecker.java',
                 'sqlg2/Business.java', 'sqlg2/BusinessNoSql.java',  'sqlg2/CheckParams.java', 
                 'sqlg2/EditableRowType.java', 'sqlg2/RowType.java', 'sqlg2/Prepare.java', 'sqlg2/PrepareKey.java', 
                 'sqlg2/Sql.java', 'sqlg2/Query.java', 'sqlg2/Call.java', 'sqlg2/SQLG.java', 
                 'sqlg2/Mapper.java', 'sqlg2/ColumnInfo.java'])
        include 'sqlg2/db/**'
        exclude(['sqlg2/db/Impl.java', 'sqlg2/db/RowTypeFactory.java', 'sqlg2/db/Caches.java', 'sqlg2/db/HttpDispatcher.java', 
                 'sqlg2/db/InternalTransaction.java', 'sqlg2/db/QueryReplacer.java'])
        include 'sqlg2/checker/**'
        exclude 'sqlg2/db/remote/**'
        exclude 'sqlg2/db/server/**'
        exclude 'sqlg2/lexer/**'
        exclude 'sqlg2/queries/**'
    }
}
